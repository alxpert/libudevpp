////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#ifndef UDEV_UDEV_HPP
#define UDEV_UDEV_HPP

////////////////////////////////////////////////////////////////////////////////
#include <memory>

namespace detail { struct udev; }

////////////////////////////////////////////////////////////////////////////////
namespace udev
{

////////////////////////////////////////////////////////////////////////////////
// Udev context.
//
// Used by the enumerate and monitor classes to get access to udev.
//
class udev
{
public:
    ////////////////////
    udev(const udev&) noexcept = default;
    udev(udev&&) noexcept = default;

    udev& operator=(const udev&) noexcept = default;
    udev& operator=(udev&&) noexcept = default;

    ////////////////////
    static udev instance();
    auto get() const noexcept { return udev_.get(); }

private:
    ////////////////////
    std::shared_ptr<detail::udev> udev_;
    udev(std::shared_ptr<detail::udev> x) : udev_(std::move(x)) { }
};

////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
#endif
